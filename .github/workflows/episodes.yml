name: Check for new podcast episodes

on:
  workflow_dispatch:

jobs:
  check-episodes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download checker binary
        run: |
          # Get the latest release info
          echo "Fetching latest release info from: https://api.github.com/repos/${{ secrets.CHECKER }}/releases/latest"
          
          # Use a temporary file to store the response and status separately
          RESPONSE_FILE=$(mktemp)
          HTTP_STATUS=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ secrets.PAT }}" 
                             -o "$RESPONSE_FILE" 
                             "https://api.github.com/repos/${{ secrets.CHECKER }}/releases/latest")
          
          echo "HTTP Status: $HTTP_STATUS"
          
          # Check HTTP status
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Error: API request failed with status $HTTP_STATUS"
            if [ "$HTTP_STATUS" = "404" ]; then
              echo "Repository not found or no releases exist. Please check:"
              echo "1. Repository name in secrets.CHECKER: ${{ secrets.CHECKER }}"
              echo "2. PAT token has access to the repository"
              echo "3. Repository has at least one published release"
            elif [ "$HTTP_STATUS" = "401" ]; then
              echo "Authentication failed. Please check the PAT token permissions."
            fi
            echo "Response:"
            cat "$RESPONSE_FILE"
            rm -f "$RESPONSE_FILE"
            exit 1
          fi
          
          echo "Release info received successfully. Parsing assets..."
          
          # Check if assets exist and extract the download URL
          ASSETS_COUNT=$(jq -r '.assets | length' "$RESPONSE_FILE")
          if [ "$ASSETS_COUNT" = "0" ] || [ "$ASSETS_COUNT" = "null" ]; then
            echo "Error: No assets found in the latest release"
            RELEASE_TAG=$(jq -r '.tag_name' "$RESPONSE_FILE")
            echo "Release tag: $RELEASE_TAG"
            rm -f "$RESPONSE_FILE"
            exit 1
          fi
          
          echo "Found $ASSETS_COUNT assets in the release"
          
          # Extract the download URL for the linux-amd64 tar.gz file
          DOWNLOAD_URL=$(jq -r '.assets[] | select(.name | contains("linux-amd64.tar.gz") and (.name | contains(".md5") | not)) | .browser_download_url' "$RESPONSE_FILE")
          
          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" = "null" ]; then
            echo "Error: No linux-amd64.tar.gz asset found in the release"
            echo "Available assets:"
            jq -r '.assets[].name' "$RESPONSE_FILE"
            rm -f "$RESPONSE_FILE"
            exit 1
          fi
          
          echo "Downloading binary from: $DOWNLOAD_URL"
          
          # Clean up the response file
          rm -f "$RESPONSE_FILE"
          
          # Download the binary (using browser_download_url, no auth needed for public releases)
          curl -L -o checker.tar.gz "$DOWNLOAD_URL"
          
          # Verify the download
          if [ ! -f checker.tar.gz ]; then
            echo "Error: Failed to download the binary"
            exit 1
          fi
          
          echo "Binary downloaded successfully"
          tar -xzf checker.tar.gz
          chmod +x checker
          echo "Binary extracted and ready to use"

      - name: Run checker
        run: |
          ./checker rss --data ${GITHUB_WORKSPACE}/data

      - name: Clean up
        run: rm -f checker checker.tar.gz

      - name: Commit and push changes
        uses: devops-infra/action-commit-push@v0.11.4
        with:
          github_token: ${{ secrets.PUSH }}
          commit_prefix: "Added new episodes"
          target_branch: new-episodes

      - name: Create pull request
        uses: devops-infra/action-pull-request@v0.6.1
        with:
          github_token: ${{ secrets.PUSH }}
          body: "**Automated pull request after adding new episodes**"
          title: "Added new episodes"
          source_branch: new-episodes
          target_branch: main