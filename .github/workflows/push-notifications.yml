name: Send Push Notifications

on:
  push:
    branches: [ main ]
    paths:
      - 'content/**/*.md'
      - 'data/**/*.json'
  repository_dispatch:
    types: [new-social-content]
  workflow_dispatch:
    inputs:
      title:
        description: 'Título de la notificación'
        required: true
        default: 'Nuevo contenido en Mundo Dolphins'
      body:
        description: 'Cuerpo de la notificación'
        required: true
        default: 'Hay nuevo contenido disponible'
      url:
        description: 'URL de destino (opcional)'
        required: false
        default: '/'

jobs:
  send-notifications:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip notifications]') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2 # Necesario para comparar cambios
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: scripts/package.json
          
      - name: Install dependencies
        working-directory: scripts/
        run: |
          if [ ! -f package.json ]; then
            npm init -y
            npm install web-push
          else
            npm install
          fi
          
      - name: Setup VAPID keys
        working-directory: scripts/
        run: |
          echo "Configurando claves VAPID..."
          if [ ! -f vapid-keys.json ]; then
            echo "Generando nuevas claves VAPID..."
            node -e "
              const webpush = require('web-push');
              const keys = webpush.generateVAPIDKeys();
              const fs = require('fs');
              fs.writeFileSync('vapid-keys.json', JSON.stringify(keys, null, 2));
              console.log('Claves VAPID generadas y guardadas');
            "
          fi
        env:
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
          
      - name: Detect content changes and send notifications
        if: github.event_name == 'push'
        working-directory: scripts/
        run: |
          echo "🔍 Detectando cambios en el contenido..."
          
          # Configurar claves VAPID desde secrets si están disponibles
          if [ -n "$VAPID_PUBLIC_KEY" ] && [ -n "$VAPID_PRIVATE_KEY" ]; then
            echo "Usando claves VAPID de GitHub secrets"
            cat > vapid-config.json << EOF
          {
            "publicKey": "$VAPID_PUBLIC_KEY",
            "privateKey": "$VAPID_PRIVATE_KEY"
          }
          EOF
          fi
          
          # Ejecutar detector de contenido
          node content-notifier.js
        env:
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
          
      - name: Send manual notification
        if: github.event_name == 'workflow_dispatch'
        working-directory: scripts/
        run: |
          echo "📨 Enviando notificación manual..."
          
          # Configurar claves VAPID
          if [ -n "$VAPID_PUBLIC_KEY" ] && [ -n "$VAPID_PRIVATE_KEY" ]; then
            cat > vapid-config.json << EOF
          {
            "publicKey": "$VAPID_PUBLIC_KEY",
            "privateKey": "$VAPID_PRIVATE_KEY"
          }
          EOF
          fi
          
          # Enviar notificación manual
          node push-notifications.js send "${{ github.event.inputs.title }}" "${{ github.event.inputs.body }}" "${{ github.event.inputs.url }}"
        env:
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}

      - name: Send repository dispatch notification
        if: github.event_name == 'repository_dispatch'
        working-directory: scripts/
        run: |
          echo "📨 Enviando notificación desde repository dispatch..."
          
          # Configurar claves VAPID
          if [ -n "$VAPID_PUBLIC_KEY" ] && [ -n "$VAPID_PRIVATE_KEY" ]; then
            cat > vapid-config.json << EOF
          {
            "publicKey": "$VAPID_PUBLIC_KEY",
            "privateKey": "$VAPID_PRIVATE_KEY"
          }
          EOF
          fi
          
          # Extraer datos del payload
          TITLE="${{ github.event.client_payload.title }}"
          BODY="${{ github.event.client_payload.body }}"
          URL="${{ github.event.client_payload.url }}"
          
          # Enviar notificación
          node push-notifications.js send "$TITLE" "$BODY" "$URL"
        env:
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
          
      - name: Commit content hash updates
        if: github.event_name == 'push'
        uses: EndBug/add-and-commit@v9.1.4
        with:
          message: "Update content hashes [skip notifications]"
          add: "./data/content-hash.json"
          push: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Notification summary
        run: |
          echo "## 🔔 Notificaciones Push Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "- **Título**: ${{ github.event.inputs.title }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Mensaje**: ${{ github.event.inputs.body }}" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: ${{ github.event.inputs.url }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
