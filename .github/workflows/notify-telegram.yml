# ---
# This workflow sends notifications to Telegram cuando se publica un nuevo artículo o podcast.
# Detecta automáticamente nuevos artículos o podcasts cuando se hace push a la rama main.
# Ejemplo de mensaje enviado:
# 🎙️ Nuevo capítulo del podcast publicado: Dolphins Podcast Ep. 1
# 🔗 https://mundodolphins.es/podcast/episodio-1/
# Requiere los secrets TELEGRAM_BOT_TOKEN y TELEGRAM_CHAT_ID configurados en el repositorio.
# ---

name: 🚀 Notify new articles or podcasts to Telegram

on:
  push:
    branches: [ main ]
    paths:
      - 'content/noticias/**/*.md'
      - 'data/season_**.json'

jobs:
  detect-articles:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(join(github.event.commits.*.added, github.event.commits.*.modified), 'content/noticias/')
    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Detect new articles
        id: detect_new_articles
        run: |
          NEW_ARTICLES=$(git diff --name-only HEAD~1 HEAD | grep -E '^content/noticias/.*\.md$' || true)
          ARTICLES_JSON="[]"
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          for file in $NEW_ARTICLES; do
            if [ -f "$file" ]; then
              TITLE=$(yq '.title' "$file" 2>/dev/null | sed 's/^null$//' || echo "New Article")
              AUTHOR=$(yq '.author' "$file" 2>/dev/null | sed 's/^null$//' || echo "Mundo Dolphins")
              FILENAME=$(basename "$file" .md)
              SECTION="noticias"
              URL="https://mundodolphins.es/${SECTION}/${FILENAME}/"
              ARTICLE_JSON=$(jq -n \
                --arg title "$TITLE" \
                --arg url "$URL" \
                --arg author "$AUTHOR" \
                --arg section "$SECTION" \
                '{title: $title, url: $url, author: $author, section: $section}')
              ARTICLES_JSON=$(echo "$ARTICLES_JSON" | jq ". + [$ARTICLE_JSON]")
              echo "✅ Article processed: $TITLE"
              echo "🔗 URL: $URL"
            fi
          done
          echo "$ARTICLES_JSON" > articles.json

  detect-podcasts:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(join(github.event.commits.*.added, github.event.commits.*.modified), 'data/season_')
    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Detect new podcasts
        id: detect_new_podcasts
        run: |
          NEW_PODCASTS=$(git diff --name-only HEAD~1 HEAD | grep -E '^data/season_.*\.json$' || true)
          PODCASTS_JSON="[]"
          for file in $NEW_PODCASTS; do
            if [ -f "$file" ]; then
              if ! jq empty "$file"; then
                echo "⚠️ El archivo $file no es un JSON válido, se omite."
                continue
              fi
              EPISODES=$(jq -c '.[]' "$file")
              for episode in $EPISODES; do
                TITLE=$(echo "$episode" | jq -r '.title // "Nuevo Podcast"')
                FILENAME=$(echo "$episode" | jq -r '.slug // ""')
                URL="https://mundodolphins.es/podcast/${FILENAME}/"
                PODCAST_JSON=$(jq -n \
                  --arg title "$TITLE" \
                  --arg url "$URL" \
                  --arg section "podcast" \
                  '{title: $title, url: $url, section: $section}')
                PODCASTS_JSON=$(echo "$PODCASTS_JSON" | jq ". + [$PODCAST_JSON]")
                echo "✅ Podcast procesado: $TITLE"
                echo "🔗 URL: $URL"
              done
            fi
          done
          echo "$PODCASTS_JSON" > podcasts.json

  notify-telegram:
    runs-on: ubuntu-latest
    needs: [detect-articles, detect-podcasts]
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Notificar a Telegram
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID environment variables"
            exit 1
          fi
          ARTICLES_JSON=$(cat articles.json 2>/dev/null || echo '[]')
          PODCASTS_JSON=$(cat podcasts.json 2>/dev/null || echo '[]')
          ALL_JSON=$(jq -s 'add' <(echo "$ARTICLES_JSON") <(echo "$PODCASTS_JSON"))
          count=$(echo "$ALL_JSON" | jq length)
          if [ "$count" -eq 0 ]; then
            echo "No new articles or podcasts to notify"
            exit 0
          fi
          for i in $(seq 0 $((count - 1))); do
            title=$(echo "$ALL_JSON" | jq -r ".[$i].title")
            url=$(echo "$ALL_JSON" | jq -r ".[$i].url")
            section=$(echo "$ALL_JSON" | jq -r ".[$i].section")
            if [ "$section" = "podcast" ]; then
              message="🎙️ Nuevo capítulo del podcast publicado: *${title}*%0A🔗 ${url}"
            else
              message="🆕 Nuevo artículo publicado en la web: *${title}*%0A🔗 ${url}"
            fi
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$message" \
              -d parse_mode="Markdown"
          done