# ---
# This workflow sends notifications to Telegram when a new article or podcast is published.
# Automatically detects new articles or podcasts when pushed to the main branch.
# Example message sent:
# üéôÔ∏è Nuevo cap√≠tulo del podcast publicado: Dolphins Podcast Ep. 1
# üîó https://mundodolphins.es/podcast/episodio-1/
# Requires TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID secrets configured in the repository.
# ---

name: üöÄ Notify new articles or podcasts to Telegram

on:
  workflow_run:
    workflows: ["Deploy Hugo site to Pages"]
    types:
      - completed

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: üîç Detect new articles/podcasts
        id: detect_content
        run: |
          echo "üîç Searching for new markdown files in content/noticias and content/podcast..."
          # Find .md files added in the latest commit on main
          git fetch origin main
          LAST_COMMIT=$(git rev-parse origin/main)
          CURRENT_COMMIT=$(git rev-parse HEAD)
          NEW_MARKDOWN=$(git diff --name-status $LAST_COMMIT $CURRENT_COMMIT | grep -E '^A\s+content/(noticias|podcast)/.*\.md$' | awk '{print $2}')

          ALL_CONTENT="[]"

          if [ -n "$NEW_MARKDOWN" ]; then
            echo "üÜï New markdown files detected:"
            echo "$NEW_MARKDOWN"
            # Install yq for YAML frontmatter extraction
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
            for file in $NEW_MARKDOWN; do
              if [ -f "$file" ]; then
                echo "üìù Processing: $file"
                FRONTMATTER=$(sed -n '/^---$/,/^---$/p' "$file" | sed '1d;$d')
                TITLE=$(echo "$FRONTMATTER" | yq '.title' 2>/dev/null | sed 's/^null$//' || echo "New Article")
                AUTHOR=$(echo "$FRONTMATTER" | yq '.author' 2>/dev/null | sed 's/^null$//' || echo "Mundo Dolphins")
                SLUG=$(echo "$FRONTMATTER" | yq '.slug' 2>/dev/null | sed 's/^null$//' || echo "")
                if [[ "$file" == content/podcast/* ]]; then
                  SECTION="podcast"
                else
                  SECTION="news"
                fi
                URL="https://mundodolphins.es/${SECTION}/${SLUG}/"
                ARTICLE_JSON=$(jq -n \
                  --arg title "$TITLE" \
                  --arg url "$URL" \
                  --arg author "$AUTHOR" \
                  --arg section "$SECTION" \
                  '{title: $title, url: $url, author: $author, section: $section}')
                ALL_CONTENT=$(echo "$ALL_CONTENT" | jq ". + [$ARTICLE_JSON]")
                echo "‚úÖ Article processed: $TITLE"
                echo "üîó URL: $URL"
              fi
            done
          else
            echo "‚ÑπÔ∏è No new markdown files detected in the specified paths."
          fi

          CONTENT_COUNT=$(echo "$ALL_CONTENT" | jq length)
          echo "has_content=$([ "$CONTENT_COUNT" -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "content_count=$CONTENT_COUNT" >> $GITHUB_OUTPUT
          echo "$ALL_CONTENT" > all_content.json
          echo "üìä Total articles to notify: $CONTENT_COUNT"

      - name: üì± Send notifications to Telegram
        if: steps.detect_content.outputs.has_content == 'true'
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ùå Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID environment variables"
            exit 1
          fi
          
          ALL_CONTENT=$(cat all_content.json)
          CONTENT_COUNT="${{ steps.detect_content.outputs.content_count }}"
          
          echo "üì± Sending $CONTENT_COUNT notifications to Telegram..."
          
          for i in $(seq 0 $((CONTENT_COUNT - 1))); do
            ITEM=$(echo "$ALL_CONTENT" | jq -r ".[$i]")
            TITLE=$(echo "$ITEM" | jq -r '.title')
            URL=$(echo "$ITEM" | jq -r '.url')
            SECTION=$(echo "$ITEM" | jq -r '.section')
            
            if [ "$SECTION" = "podcast" ]; then
              MESSAGE="üéôÔ∏è Nuevo episodio de podcast publicado: *${TITLE}*%0Aüîó ${URL}"
            else
              MESSAGE="üÜï Nuevo art√≠culo publicado en la web: *${TITLE}*%0Aüîó ${URL}"
            fi
            
            echo "üì§ Sending notification $((i+1))/$CONTENT_COUNT: $TITLE"
            
            # Send message with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="$MESSAGE" \
                -d parse_mode="Markdown")
              
              OK=$(echo "$RESPONSE" | jq -r '.ok')
              if [ "$OK" = "true" ]; then
                echo "‚úÖ Successfully sent notification $((i+1))/$CONTENT_COUNT"
                break
              fi
              
              ERROR_CODE=$(echo "$RESPONSE" | jq -r '.error_code // empty')
              if [ "$ERROR_CODE" = "429" ]; then
                RETRY_AFTER=$(echo "$RESPONSE" | jq -r '.parameters.retry_after // 30')
                echo "‚è≥ Rate limit hit. Waiting $RETRY_AFTER seconds..."
                sleep $RETRY_AFTER
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚ö†Ô∏è Attempt $RETRY_COUNT/$MAX_RETRIES failed. Response: $RESPONSE"
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  sleep 2
                fi
              fi
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Failed to send notification after $MAX_RETRIES attempts"
            fi
            
            # Small delay between messages
            sleep 1
          done
          
          echo "üéâ Notification process completed!"