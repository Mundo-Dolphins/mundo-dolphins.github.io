# ---
# This workflow sends notifications to Telegram when a new article or podcast is published.
# Automatically detects new articles or podcasts when pushed to the main branch.
# Example message sent:
# üéôÔ∏è Nuevo cap√≠tulo del podcast publicado: Dolphins Podcast Ep. 1
# üîó https://mundodolphins.es/podcast/episodio-1/
# Requires TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID secrets configured in the repository.
# ---

name: üöÄ Notify new articles or podcasts to Telegram

on:
  workflow_run:
    workflows: ["Deploy Hugo site to Pages"]
    types:
      - completed

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: üîç Detect new articles/podcasts
        id: detect_new
        run: |
          chmod +x scripts/notify/detect_new_articles.sh
          scripts/notify/detect_new_articles.sh

      - name: üì± Send notifications to Telegram
        if: steps.detect_new.outputs.has_new_articles == 'true'
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ùå Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID environment variables"
            exit 1
          fi

          if [ ! -f articles.json ]; then
            echo "‚ùå articles.json not found; nothing to send"
            exit 1
          fi

          ALL_CONTENT=$(cat articles.json)
          CONTENT_COUNT="${{ steps.detect_new.outputs.articles_count }}"

          echo "üì± Sending $CONTENT_COUNT notifications to Telegram..."

          for i in $(seq 0 $((CONTENT_COUNT - 1))); do
            ITEM=$(echo "$ALL_CONTENT" | jq -r ".[$i]")
            TITLE=$(echo "$ITEM" | jq -r '.title')
            URL=$(echo "$ITEM" | jq -r '.url')
            SECTION=$(echo "$ITEM" | jq -r '.section')

            if [ "$SECTION" = "podcast" ]; then
              MESSAGE="üéôÔ∏è Nuevo episodio de podcast publicado: *${TITLE}*%0Aüîó ${URL}"
            else
              MESSAGE="üÜï Nuevo art√≠culo publicado en la web: *${TITLE}*%0Aüîó ${URL}"
            fi

            echo "üì§ Sending notification $((i+1))/$CONTENT_COUNT: $TITLE"

            MAX_RETRIES=3
            RETRY_COUNT=0

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="$MESSAGE" \
                -d parse_mode="Markdown")

              OK=$(echo "$RESPONSE" | jq -r '.ok')
              if [ "$OK" = "true" ]; then
                echo "‚úÖ Successfully sent notification $((i+1))/$CONTENT_COUNT"
                break
              fi

              ERROR_CODE=$(echo "$RESPONSE" | jq -r '.error_code // empty')
              if [ "$ERROR_CODE" = "429" ]; then
                RETRY_AFTER=$(echo "$RESPONSE" | jq -r '.parameters.retry_after // 30')
                echo "‚è≥ Rate limit hit. Waiting $RETRY_AFTER seconds..."
                sleep $RETRY_AFTER
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚ö†Ô∏è Attempt $RETRY_COUNT/$MAX_RETRIES failed. Response: $RESPONSE"
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  sleep 2
                fi
              fi
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Failed to send notification after $MAX_RETRIES attempts"
            fi

            sleep 1
          done

          echo "üéâ Notification process completed!"