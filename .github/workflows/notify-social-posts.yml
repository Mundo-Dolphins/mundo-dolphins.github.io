name: ðŸš€ Notify new Bluesky posts to Telegram

on:
  push:
    branches: [ main ]
    paths:
      - 'data/posts_*.json'

jobs:
  notify-telegram-social:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Detect new social posts
        id: detect_posts
        run: |
          echo "Detecting new social posts..."
          NEW_FILES=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | grep -E '^data/posts_.*\.json$' || true)
          MODIFIED_FILES=$(git diff --name-only --diff-filter=M HEAD~1 HEAD | grep -E '^data/posts_.*\.json$' || true)
          FILES="$NEW_FILES $MODIFIED_FILES"
          if [ -z "$FILES" ]; then
            echo "No new social posts."
            echo "has_new_posts=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Changed social post files: $FILES"
          echo "has_new_posts=true" >> $GITHUB_OUTPUT
          echo "$FILES" > changed_posts_files.txt


      - name: Get last successful workflow run datetime
        id: last_run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Retrieving last successful workflow run datetime..."
          # Get the workflow file name
          WORKFLOW_FILE=".github/workflows/notify-social-posts.yml"
          # Get the last successful run (excluding current run)
          LAST_RUN_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/actions/workflows/$(basename $WORKFLOW_FILE)/runs?status=success&branch=${GITHUB_REF_NAME}&per_page=2" \
            --jq '.workflow_runs | map(select(.id != ${{ github.run_id }})) | .[0]')
          LAST_RUN_TIME=$(echo "$LAST_RUN_JSON" | jq -r '.updated_at // empty')
          if [ -z "$LAST_RUN_TIME" ] || [ "$LAST_RUN_TIME" = "null" ]; then
            echo "No previous successful run found. Will publish all posts."
            echo "last_run_time=" >> $GITHUB_OUTPUT
          else
            echo "Last successful run finished at: $LAST_RUN_TIME"
            echo "last_run_time=$LAST_RUN_TIME" >> $GITHUB_OUTPUT
          fi

      - name: Send Bluesky posts to Telegram
        if: steps.detect_posts.outputs.has_new_posts == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID environment variables"
            exit 1
          fi
          LAST_RUN_TIME="${{ steps.last_run.outputs.last_run_time }}"
          echo "Filtering posts published after: $LAST_RUN_TIME"
          for file in $(cat changed_posts_files.txt); do
            echo "Processing $file..."
            jq -c 'sort_by(.PublishedOn)[]' "$file" | while read -r post; do
              stype=$(echo "$post" | jq -r '.stype // 1')
              [ "$stype" = "0" ] || continue
              published=$(echo "$post" | jq -r '.PublishedOn // empty')
              text=$(echo "$post" | jq -r '.BlueSkyPost.Description // empty')
              url=$(echo "$post" | jq -r '.BlueSkyPost.BskyPost // empty')
              # Only publish if the date is greater than the last successful run
              if [ -n "$published" ] && { [ -z "$LAST_RUN_TIME" ] || [[ "$published" > "$LAST_RUN_TIME" ]]; }; then
                if [ -n "$text" ] && [ -n "$url" ]; then
                  # URL encode the newline character for proper Telegram formatting
                  message="${text}%0AðŸ”— ${url}"
                  echo "Sending post to Telegram: $url"
                  while true; do
                    response=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                      -d chat_id="$TELEGRAM_CHAT_ID" \
                      -d text="$message" \
                      -d parse_mode="Markdown")
                    ok=$(echo "$response" | jq -r '.ok')
                    if [ "$ok" = "true" ]; then
                      echo "Successfully sent post: $url"
                      break
                    fi
                    error_code=$(echo "$response" | jq -r '.error_code // empty')
                    if [ "$error_code" = "429" ]; then
                      retry_after=$(echo "$response" | jq -r '.parameters.retry_after // 30')
                      echo "Rate limit hit (429). Waiting $retry_after seconds before retrying post: $url"
                      sleep $retry_after
                    else
                      echo "Telegram error sending post: $url"
                      echo "Response: $response"
                      break
                    fi
                  done
                fi
              fi
            done
          done
